{"ast":null,"code":"import \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _slicedToArray from \"/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/app/src/components/table/search.js\";\nimport React, { useState } from \"react\";\nimport Highlighter from \"react-highlight-words\";\n\nconst TableSearch = (dataIndex, textName) => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchText = _useState2[0],\n        setSearchText = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        searchedColumn = _useState4[0],\n        setSearchedColumn = _useState4[1];\n\n  const getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters\n    }) => React.createElement(\"div\", {\n      style: {\n        padding: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      placeholder: \"Buscar \".concat(textName),\n      value: selectedKeys[0],\n      onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n      onPressEnter: () => handleSearch(selectedKeys, confirm, dataIndex),\n      style: {\n        width: 255,\n        marginBottom: 8,\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }), React.createElement(_Button, {\n      type: \"primary\",\n      onClick: () => handleSearch(selectedKeys, confirm, dataIndex),\n      icon: \"search\",\n      size: \"small\",\n      style: {\n        width: 90,\n        marginRight: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Buscar\"), React.createElement(_Button, {\n      onClick: () => handleReset(clearFilters),\n      size: \"small\",\n      style: {\n        width: 90\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Reset\")),\n    filterIcon: filtered => React.createElement(_Icon, {\n      type: \"search\",\n      style: {\n        color: filtered ? \"#1890ff\" : undefined\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }),\n    onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {//setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text => searchedColumn === dataIndex ? React.createElement(Highlighter, {\n      highlightStyle: {\n        backgroundColor: \"#ffc069\",\n        padding: 0\n      },\n      searchWords: [searchText],\n      autoEscape: true,\n      textToHighlight: text.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }) : text\n  });\n\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    setSearchText(selectedKeys[0]);\n    setSearchedColumn(dataIndex);\n  };\n\n  const handleReset = clearFilters => {\n    clearFilters();\n    setSearchText(\"\");\n  };\n\n  return getColumnSearchProps(dataIndex);\n};\n\nexport default TableSearch;","map":{"version":3,"sources":["/app/src/components/table/search.js"],"names":["React","useState","Highlighter","TableSearch","dataIndex","textName","searchText","setSearchText","searchedColumn","setSearchedColumn","getColumnSearchProps","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","e","target","value","handleSearch","width","marginBottom","display","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","render","text","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Input, Button, Icon } from \"antd\";\nimport Highlighter from \"react-highlight-words\";\n\nconst TableSearch = (dataIndex,textName) => {\n  const [searchText, setSearchText] = useState(\"\");\n  const [searchedColumn, setSearchedColumn] = useState(\"\");\n\n  const getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder={`Buscar ${textName}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 255, marginBottom: 8, display: \"block\"}}\n        />\n        <Button\n          type=\"primary\"\n          onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\n          icon=\"search\"\n          size=\"small\"\n          style={{ width: 90, marginRight: 8}}\n        >\n          Buscar\n        </Button>\n        <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90}}>\n          Reset\n        </Button>\n      </div>\n    ),\n    filterIcon: filtered => <Icon type=\"search\" style={{ color: filtered ? \"#1890ff\" : undefined }} />,\n    onFilter: (value, record) =>\n      record[dataIndex]\n        .toString()\n        .toLowerCase()\n        .includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        //setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text =>\n      searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: \"#ffc069\", padding: 0 }}\n          searchWords={[searchText]}\n          autoEscape\n          textToHighlight={text.toString()}\n        />\n      ) : (\n        text\n      )\n  });\n\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    setSearchText(selectedKeys[0]);\n    setSearchedColumn(dataIndex);\n  };\n\n  const handleReset = clearFilters => {\n    clearFilters();\n    setSearchText(\"\");\n  };\n\n  return getColumnSearchProps(dataIndex);\n};\n\nexport default TableSearch;\n"]},"metadata":{},"sourceType":"module"}