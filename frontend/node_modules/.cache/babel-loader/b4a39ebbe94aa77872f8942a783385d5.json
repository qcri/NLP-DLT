{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nvar _excluded = [\"cdnSuffix\", \"cdnUrl\", \"countryCode\", \"style\", \"svg\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar DEFAULT_CDN_URL = 'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.4.3/flags/4x3/';\nvar DEFAULT_CDN_SUFFIX = 'svg'; // offset between uppercase ascii and regional indicator symbols\n\nvar OFFSET = 127397;\n\nfunction ReactCountryFlag(_ref) {\n  _ref.cdnSuffix;\n\n  var cdnUrl = _ref.cdnUrl,\n      countryCode = _ref.countryCode,\n      style = _ref.style,\n      svg = _ref.svg,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n\n  if (svg) {\n    var flagUrl = \"\".concat(cdnUrl).concat(countryCode.toLowerCase(), \".\").concat(DEFAULT_CDN_SUFFIX);\n    return (\n      /*#__PURE__*/\n      React.createElement(\"img\", _extends({}, props, {\n        src: flagUrl,\n        style: _objectSpread({\n          display: 'inline-block',\n          width: '1em',\n          height: '1em',\n          verticalAlign: 'middle'\n        }, style)\n      }))\n    );\n  }\n\n  var emoji = countryCode.toUpperCase().replace(/./g, function (char) {\n    return String.fromCodePoint(char.charCodeAt(0) + OFFSET);\n  });\n  return (\n    /*#__PURE__*/\n    React.createElement(\"span\", _extends({\n      role: \"img\"\n    }, props, {\n      style: _objectSpread({\n        display: 'inline-block',\n        fontSize: '1em',\n        lineHeight: '1em',\n        verticalAlign: 'middle'\n      }, style)\n    }), emoji)\n  );\n}\n\nReactCountryFlag.propTypes = {\n  cdnUrl: PropTypes.string,\n  countryCode: PropTypes.string.isRequired,\n  style: PropTypes.object,\n  svg: PropTypes.bool\n};\nReactCountryFlag.defaultProps = {\n  cdnUrl: DEFAULT_CDN_URL,\n  svg: false\n};\nexport default ReactCountryFlag;","map":null,"metadata":{},"sourceType":"module"}