{"ast":null,"code":"import \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/spin/style\";\nimport _Spin from \"antd/es/spin\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/auto-complete/style\";\nimport _AutoComplete from \"antd/es/auto-complete\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _defineProperty from \"/app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nvar _jsxFileName = \"/app/src/pages/RegisterMNO/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./../../App.css\";\nimport axios from \"axios\";\nimport * as lerData from \"../../data/COUNTRY.json\"; //Leaflet\n//----------------------------------------------------------------------------------------------\n\nimport 'react-leaflet-markercluster/dist/styles.min.css';\nimport 'leaflet/dist/leaflet.css';\nimport './../../react-leaflet.css';\nimport L, { Icon } from 'leaflet'; //----------------------------------------------------------------------------------------------\n\nexport const icon = new Icon({\n  iconUrl: \"./icon/location.svg\",\n  iconSize: [25, 25]\n});\n\n_notification.config({\n  placement: \"topRight\",\n  bottom: 50,\n  duration: 1.5\n});\n\nconst initialFormState = {\n  mno_name: \"\",\n  mno_country: \"\",\n  mno_network: \"\"\n};\n\nconst RegisterMNO = () => {\n  useEffect(() => {\n    delete L.Icon.Default.prototype._getIconUrl;\n    L.Icon.Default.mergeOptions({\n      iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n      iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n      shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n    });\n  }, []);\n  const formItemLayout = {};\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(initialFormState),\n        _useState4 = _slicedToArray(_useState3, 2),\n        feature = _useState4[0],\n        setFeature = _useState4[1];\n\n  let userDetails = JSON.parse(localStorage.getItem('user'));\n\n  function onChange(value) {\n    setFeature(prevValue => _objectSpread({}, prevValue, {\n      mno_country: value\n    }));\n  }\n\n  function handleChange(event) {\n    const value = event.target.value;\n    setFeature(_objectSpread({}, feature, {\n      [event.target.name]: value\n    }));\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setLoading(true);\n    const jwtToken = localStorage.getItem(\"token\"); //Set POST request\n\n    axios.post(\"http://\".concat(process.env.REACT_APP_GATEWAY_HOST, \":\").concat(process.env.REACT_APP_GATEWAY_PORT, \"/addOrg\"), {\n      feature,\n      userDetails\n    }, {\n      headers: {\n        \"Authorization\": \"Bearer \".concat(jwtToken)\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        openNotificationWithIcon(\"success\", \"MNO SUCCESSFULLY REGISTERED\");\n      }\n\n      if (res.status === 201) {\n        openNotificationWithIcon(\"error\", \"MISSING VALUES TO REGISTER THE MNO\");\n      }\n\n      if (res.status === 202) {\n        openNotificationWithIcon(\"error\", \"CONTAINER NOT DEPLOYED FOR THIS ENTITY\");\n      }\n\n      if (res.status === 403) {\n        openNotificationWithIcon(\"error\", \"IDENTITY ALREADY REGISTERED\");\n      }\n    }).catch(() => openNotificationWithIcon(\"error\", \"IDENTITY ALREADY REGISTERED\")).finally(() => setLoading(false));\n  }\n\n  ;\n\n  const openNotificationWithIcon = (type, title, description) => {\n    _notification[type]({\n      message: title,\n      description: description\n    });\n  };\n\n  return React.createElement(\"section\", {\n    className: \"CommentsWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \" REGISTER MOBILE NETWORK OPERATOR\"), React.createElement(_Row, {\n    gutter: [16, 16],\n    type: \"flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(_Col, {\n    xl: 24,\n    lg: 24,\n    md: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(_Form, Object.assign({}, formItemLayout, {\n    name: \"basic\",\n    initialvalues: {\n      remember: true\n    } //onSubmit={handleSubmit}          \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(_Spin, {\n    spinning: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(_Col, {\n    lg: 12,\n    md: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(_Form.Item, {\n    label: \"MOBILE NETWORK OPERATOR NAME:\",\n    name: \"mno_name\",\n    rules: [{\n      required: true,\n      message: \"MOBILE NETWORK OPERATOR NAME\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(_Input, {\n    size: \"large\",\n    placeholder: \"E.g.: TELEFONICA\",\n    type: \"text\",\n    name: \"mno_name\",\n    style: {\n      width: '80%'\n    },\n    value: feature.mno_name,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  })), React.createElement(_Form.Item, {\n    label: \"COUNTRY OF MOBILE NETWORK OPERATOR:\",\n    name: \"mno_country\",\n    rules: [{\n      required: true,\n      message: \"COUNTRY OF MOBILE NETWORK OPERATOR\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(_AutoComplete, {\n    size: \"large\",\n    dataSource: lerData.LER.map(data => data.name),\n    placeholder: \"SELECT THE COUNTRY OF THE MNO\",\n    style: {\n      width: '80%'\n    },\n    onSelect: data => data,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  })), React.createElement(_Form.Item, {\n    label: \"NETWORK INFORMATION:\",\n    name: \"mno_network\",\n    rules: [{\n      required: true,\n      message: \"NETWORK INFORMATION\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(_Input, {\n    size: \"large\",\n    placeholder: \"E.g.: MOVISTAR\",\n    type: \"text\",\n    name: \"mno_network\",\n    style: {\n      width: '80%'\n    },\n    value: feature.mno_network,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }), React.createElement(_Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(_Button, {\n    size: \"large\",\n    type: \"primary\",\n    htmlType: \"submit\",\n    block: true,\n    onClick: e => {\n      handleSubmit(e);\n    },\n    style: {\n      width: '80%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"REGISTER MNO\"))), React.createElement(_Col, {\n    lg: 12,\n    md: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(_Form.Item, {\n    label: \"TADIG:\",\n    rules: [{\n      required: true,\n      message: \"NETWORK OF THE MNO\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(_Input, {\n    size: \"large\",\n    placeholder: \"E.g.: TADIG CODE\",\n    type: \"text\",\n    name: \"mno_network\",\n    style: {\n      width: '80%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }))))))));\n};\n\nexport default RegisterMNO;","map":{"version":3,"sources":["/app/src/pages/RegisterMNO/index.js"],"names":["React","useState","useEffect","axios","lerData","L","Icon","icon","iconUrl","iconSize","config","placement","bottom","duration","initialFormState","mno_name","mno_country","mno_network","RegisterMNO","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","shadowUrl","formItemLayout","loading","setLoading","feature","setFeature","userDetails","JSON","parse","localStorage","getItem","onChange","value","prevValue","handleChange","event","target","name","handleSubmit","preventDefault","jwtToken","post","process","env","REACT_APP_GATEWAY_HOST","REACT_APP_GATEWAY_PORT","headers","then","res","status","openNotificationWithIcon","catch","finally","type","title","description","message","remember","required","width","LER","map","data","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  AutoComplete,\n  Row,\n  Col,\n  Form,\n  Input,\n  Button,\n  Spin,\n  notification,\n} from \"antd\";\nimport \"./../../App.css\";\nimport axios from \"axios\";\nimport * as lerData from \"../../data/COUNTRY.json\";\n//Leaflet\n//----------------------------------------------------------------------------------------------\nimport 'react-leaflet-markercluster/dist/styles.min.css';\nimport 'leaflet/dist/leaflet.css';\nimport './../../react-leaflet.css';\nimport L, { Icon } from 'leaflet';\n//----------------------------------------------------------------------------------------------\n\nexport const icon = new Icon({\n  iconUrl: \"./icon/location.svg\",\n  iconSize: [25, 25]\n});\n\nnotification.config({\n  placement: \"topRight\",\n  bottom: 50,\n  duration: 1.5,\n});\n\nconst initialFormState = {\n  mno_name: \"\",\n  mno_country: \"\",\n  mno_network: \"\",\n};\n\nconst RegisterMNO = () => {\n\n  useEffect(() => {\n    delete L.Icon.Default.prototype._getIconUrl;\n    L.Icon.Default.mergeOptions({\n      iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n      iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n      shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n    });\n  }, []);\n\n  const formItemLayout = {};\n\n  const [loading, setLoading] = useState(false);\n  const [feature, setFeature] = useState(initialFormState);\n  let userDetails = JSON.parse(localStorage.getItem('user'));\n\n  function onChange(value) {\n    setFeature(prevValue => ({ ...prevValue, mno_country: value }))\n  }\n\n  function handleChange(event) {\n    const value = event.target.value;\n    setFeature({\n      ...feature,\n      [event.target.name]: value\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setLoading(true)\n    const jwtToken = localStorage.getItem(\"token\");\n    //Set POST request\n    axios\n      .post(`http://${process.env.REACT_APP_GATEWAY_HOST}:${process.env.REACT_APP_GATEWAY_PORT}/addOrg`, { feature, userDetails }, { headers: { \"Authorization\": `Bearer ${jwtToken}` } })\n      .then((res) => {\n        if (res.status === 200) {\n          openNotificationWithIcon(\n            \"success\",\n            \"MNO SUCCESSFULLY REGISTERED\"\n          );\n        }\n        if (res.status === 201) {\n          openNotificationWithIcon(\n            \"error\",\n            \"MISSING VALUES TO REGISTER THE MNO\"\n          );\n        }\n        if (res.status === 202) {\n          openNotificationWithIcon(\n            \"error\",\n            \"CONTAINER NOT DEPLOYED FOR THIS ENTITY\"\n          );\n        }\n        if (res.status === 403) {\n          openNotificationWithIcon(\n            \"error\",\n            \"IDENTITY ALREADY REGISTERED\"\n          );\n        }\n      })\n      .catch(() =>\n        openNotificationWithIcon(\n          \"error\",\n          \"IDENTITY ALREADY REGISTERED\",\n        )\n      )\n      .finally(() => setLoading(false));\n  };\n\n  const openNotificationWithIcon = (type, title, description) => {\n    notification[type]({\n      message: title,\n      description: description,\n    });\n  };\n\n  return (\n    <section className=\"CommentsWrapper\">\n      <h2> REGISTER MOBILE NETWORK OPERATOR</h2>\n      <Row gutter={[16, 16]} type=\"flex\">\n        <Col xl={24} lg={24} md={24}>\n          <Form\n            {...formItemLayout}\n            name=\"basic\"\n            initialvalues={{\n              remember: true\n            }}\n          //onSubmit={handleSubmit}          \n          >\n            <Spin spinning={loading}>\n              <Col lg={12} md={24}>\n                <Form.Item\n                  label=\"MOBILE NETWORK OPERATOR NAME:\"\n                  name=\"mno_name\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"MOBILE NETWORK OPERATOR NAME\"\n                    }\n                  ]}\n                >\n                  <Input\n                    size=\"large\"\n                    placeholder=\"E.g.: TELEFONICA\"\n                    type=\"text\"\n                    name=\"mno_name\"\n                    style={{ width: '80%' }}\n                    value={feature.mno_name}\n                    onChange={handleChange}\n                  />\n                </Form.Item>\n\n                <Form.Item\n                  label=\"COUNTRY OF MOBILE NETWORK OPERATOR:\"\n                  name=\"mno_country\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"COUNTRY OF MOBILE NETWORK OPERATOR\"\n                    }\n                  ]}\n                >\n                  <AutoComplete\n                    size=\"large\"\n                    dataSource={lerData.LER.map(data => data.name)}\n                    placeholder={\"SELECT THE COUNTRY OF THE MNO\"}\n                    style={{ width: '80%' }}\n                    onSelect={(data) => data}\n                    onChange={onChange}\n                  />\n                </Form.Item>\n\n                <Form.Item\n                  label=\"NETWORK INFORMATION:\"\n                  name=\"mno_network\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"NETWORK INFORMATION\"\n                    }\n                  ]}\n                >\n                  <Input\n                    size=\"large\"\n                    placeholder=\"E.g.: MOVISTAR\"\n                    type=\"text\"\n                    name=\"mno_network\"\n                    style={{ width: '80%' }}\n                    value={feature.mno_network}\n                    onChange={handleChange}\n                  />\n                </Form.Item>\n\n                <br />\n                <br />\n\n                <Form.Item>\n                  <Button\n                    size=\"large\"\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    block\n                    onClick={e => {\n                      handleSubmit(e)\n                    }}\n                    style={{ width: '80%' }}\n                  >\n                    REGISTER MNO\n                  </Button>\n                </Form.Item>\n              </Col>\n              <Col lg={12} md={24}>\n                <Form.Item\n                  label=\"TADIG:\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"NETWORK OF THE MNO\"\n                    }\n                  ]}\n                >\n                  <Input\n                    size=\"large\"\n                    placeholder=\"E.g.: TADIG CODE\"\n                    type=\"text\"\n                    name=\"mno_network\"\n                    style={{ width: '80%' }}\n                  />\n                </Form.Item>\n              </Col>\n            </Spin>\n          </Form>\n        </Col>\n      </Row>\n    </section>\n  );\n};\n\nexport default RegisterMNO;"]},"metadata":{},"sourceType":"module"}